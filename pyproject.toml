[project]
name = "learn-from-agg-obs"
version = "0.1.0"
description = "A set of algorithms to learn individual-level predictors from group-level signals"
readme = "README.md"
authors = [{ name = "bastienqb", email = "random@gmail" }]
requires-python = ">=3.9"
dependencies = []

[build-system]
build-backend = "mesonpy"
requires = ["meson-python>=0.16.0", "Cython>=3.0.10", "tomli"]

[dependency-groups]
dev = ["pytest>=7.2"]
build = ["meson-python>=0.16.0", "meson", "ninja", "tomli", "Cython>=3.0.10"]
docs = [
  "furo>=2024.8.6",
  "myst-parser>=3.0.1",
  "sphinx>=7.4.7",
  "sphinx-design>=0.6.1",
]

[tool.uv]
no-build-isolation-package = ["learn-from-agg-obs"]
default-groups = ["dev", "build"]

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
  "B",    # flake8-bugbear
  "Q",    # flake8-quotes
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "I",    # isort
  "D",    # pydocstyle
  "D413", # end-of-docstring line
  "T201", # print
  "C4",   # flake8-comprehensions
  "RUF",  # Ruff-specific rules
]
ignore = ["D107"]

[tool.ruff.lint.per-file-ignores]
# Tests can use relative imports, ignore missing docstrings,
# compare to empty string
"**/tests/**" = ["D100", "D101", "D102", "D103"]
# Ignore import violations in all __init__.py files
"__init__.py" = ["E402", "F401"]
"conf.py" = ["D100", "E501"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = ["aolearn"]

[tool.codespell]
builtin = "clear,rare"
